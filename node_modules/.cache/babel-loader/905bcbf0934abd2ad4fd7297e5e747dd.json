{"ast":null,"code":"import axios from 'axios';\nimport configApi from '../config/api';\n/**\n * Get method\n * @param url\n * @returns {Promise<R>}\n */\n\nvar get = function get(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    var headers = {\n      'Content-Type': \"application/json\"\n    };\n    axios.get(baseUrl, data, headers).then(function (res) {\n      if (res.data.success) {\n        resolve(res.data);\n      } else if (res.statusText === 'OK') {\n        resolve(res);\n      } else {\n        reject(res.data);\n      }\n    }).catch(function (error) {\n      if (error.response.data) {\n        reject(error.response.data);\n      } else {\n        reject({\n          apiError: 'Not Found'\n        });\n      }\n    });\n  });\n};\n/**\n * Post method\n * @param url\n * @param data\n * @param method\n * @returns {Promise<R>}\n */\n\n\nvar post = function post(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    var baseUrl = url;\n    var headers = {\n      'Content-Type': \"application/json\"\n    };\n    axios.post(baseUrl, data, headers).then(function (res) {\n      if (res.data.success) {\n        resolve(res.data);\n      } else {\n        reject(res.data);\n      }\n    }).catch(function (error) {\n      reject(error.response.data);\n    });\n  });\n};\n\nvar obj = {\n  get: get,\n  post: post,\n  put: function put(url, data) {\n    return post(url, data, 'PUT');\n  }\n};\nexport default obj;","map":{"version":3,"sources":["/Users/irfan/projects/local/trunk-user-interface-stand-alone/src/utils/fetch.js"],"names":["axios","configApi","get","url","data","Promise","resolve","reject","headers","baseUrl","then","res","success","statusText","catch","error","response","apiError","post","obj","put"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,GAAD,EAAoB;AAAA,MAAdC,IAAc,uEAAP,EAAO;AAC5B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpC,QAAIC,OAAO,GAAI;AACX;AADW,KAAf;AAGAR,IAAAA,KAAK,CAACE,GAAN,CAAUO,OAAV,EAAmBL,IAAnB,EAAyBI,OAAzB,EACCE,IADD,CACM,UAAAC,GAAG,EAAI;AACT,UAAIA,GAAG,CAACP,IAAJ,CAASQ,OAAb,EAAsB;AAClBN,QAAAA,OAAO,CAACK,GAAG,CAACP,IAAL,CAAP;AACH,OAFD,MAEO,IAAGO,GAAG,CAACE,UAAJ,KAAmB,IAAtB,EAA4B;AAC/BP,QAAAA,OAAO,CAACK,GAAD,CAAP;AACH,OAFM,MAGF;AACDJ,QAAAA,MAAM,CAACI,GAAG,CAACP,IAAL,CAAN;AACH;AACJ,KAVD,EAWCU,KAXD,CAWO,UAACC,KAAD,EAAW;AACd,UAAGA,KAAK,CAACC,QAAN,CAAeZ,IAAlB,EACA;AACIG,QAAAA,MAAM,CAACQ,KAAK,CAACC,QAAN,CAAeZ,IAAhB,CAAN;AACH,OAHD,MAKA;AACIG,QAAAA,MAAM,CAAC;AAACU,UAAAA,QAAQ,EAAE;AAAX,SAAD,CAAN;AACH;AACJ,KApBD;AAqBH,GA1BM,CAAP;AA2BH,CA5BD;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEC,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACf,GAAD,EAAoB;AAAA,MAAdC,IAAc,uEAAP,EAAO;AAC9B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,QAAIE,OAAO,GAAGN,GAAd;AACA,QAAIK,OAAO,GAAI;AACX;AADW,KAAf;AAGAR,IAAAA,KAAK,CACJkB,IADD,CACMT,OADN,EACeL,IADf,EACqBI,OADrB,EAECE,IAFD,CAEM,UAAAC,GAAG,EAAI;AACT,UAAIA,GAAG,CAACP,IAAJ,CAASQ,OAAb,EAAsB;AAClBN,QAAAA,OAAO,CAACK,GAAG,CAACP,IAAL,CAAP;AACH,OAFD,MAEO;AACHG,QAAAA,MAAM,CAACI,GAAG,CAACP,IAAL,CAAN;AACH;AACJ,KARD,EASCU,KATD,CASO,UAACC,KAAD,EAAW;AACdR,MAAAA,MAAM,CAACQ,KAAK,CAACC,QAAN,CAAeZ,IAAhB,CAAN;AACH,KAXD;AAYH,GAjBM,CAAP;AAkBH,CAnBA;;AAqBD,IAAMe,GAAG,GAAG;AACRjB,EAAAA,GAAG,EAAHA,GADQ;AAERgB,EAAAA,IAAI,EAAJA,IAFQ;AAGRE,EAAAA,GAAG,EAAE,aAACjB,GAAD,EAAMC,IAAN;AAAA,WAAec,IAAI,CAACf,GAAD,EAAMC,IAAN,EAAY,KAAZ,CAAnB;AAAA;AAHG,CAAZ;AAMA,eAAee,GAAf","sourcesContent":["import axios from 'axios';\nimport configApi from '../config/api';\n/**\n * Get method\n * @param url\n * @returns {Promise<R>}\n */\n\nconst get = (url, data = {}) => {\n    return new Promise((resolve, reject) => {\n        \n        let headers =  {\n            'Content-Type': `application/json`,\n        }\n        axios.get(baseUrl, data, headers)\n        .then(res => {\n            if (res.data.success) {\n                resolve(res.data);\n            } else if(res.statusText === 'OK') {\n                resolve(res);\n            }\n            else {\n                reject(res.data);\n            }\n        })\n        .catch((error) => {\n            if(error.response.data)\n            {\n                reject(error.response.data)\n            }\n            else\n            {\n                reject({apiError: 'Not Found'})\n            }\n        });\n    });\n}\n\n/**\n * Post method\n * @param url\n * @param data\n * @param method\n * @returns {Promise<R>}\n */\n\n const post = (url, data = {}) => {\n    return new Promise((resolve, reject) => {\n        let baseUrl = url;\n        let headers =  {\n            'Content-Type': `application/json`,\n        }\n        axios\n        .post(baseUrl, data, headers)\n        .then(res => {\n            if (res.data.success) {\n                resolve(res.data);\n            } else {\n                reject(res.data);\n            }\n        })\n        .catch((error) => {\n            reject(error.response.data);\n        });\n    });\n}\n\nconst obj = {\n    get,\n    post,\n    put: (url, data) => post(url, data, 'PUT'),\n}\n\nexport default obj;"]},"metadata":{},"sourceType":"module"}