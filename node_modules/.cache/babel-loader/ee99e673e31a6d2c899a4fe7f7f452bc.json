{"ast":null,"code":"import _regeneratorRuntime from \"/Users/irfan/projects/local/trunk-user-interface-stand-alone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(createCustomerSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadCustomerSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadCustomerbyIDSaga),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(deleteCustomerSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(customerSaga);\n\nimport * as Actions from './constants';\nimport { createCustomer, loadCustomer, loadCustomerByID, deleteCustomer } from './service';\n\nvar _require = require(\"@redux-saga/core/effects\"),\n    put = _require.put,\n    call = _require.call,\n    takeEvery = _require.takeEvery;\n/**\n * Create Customer saga\n */\n\n\nfunction createCustomerSaga(_ref) {\n  var formData, _yield$call, data;\n\n  return _regeneratorRuntime.wrap(function createCustomerSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          formData = _ref.formData;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(createCustomer, formData);\n\n        case 4:\n          _yield$call = _context.sent;\n          data = _yield$call.data;\n          _context.next = 8;\n          return put({\n            type: Actions.CREATE_CUSTOMER_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 14;\n          return put({\n            type: Actions.CREATE_CUSTOMER_ERROR,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 10]]);\n}\n/**\n * Load customer\n */\n\n\nfunction loadCustomerSaga(_ref2) {\n  var query, _yield$call2, data, _pager;\n\n  return _regeneratorRuntime.wrap(function loadCustomerSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          query = _ref2.query;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(loadCustomer, {\n            query: query\n          });\n\n        case 4:\n          _yield$call2 = _context2.sent;\n          data = _yield$call2.data;\n          _pager = _yield$call2.pager;\n          _context2.next = 9;\n          return put({\n            type: Actions.LOAD_CUSTOMER_SUCCESS,\n            payload: data,\n            pager: _pager\n          });\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 15;\n          return put({\n            type: Actions.LOAD_CUSTOMER_ERROR,\n            error: _context2.t0\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 11]]);\n}\n/**\n * Load customer by id\n */\n\n\nfunction loadCustomerbyIDSaga(_ref3) {\n  var id, _yield$call3, data;\n\n  return _regeneratorRuntime.wrap(function loadCustomerbyIDSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = _ref3.id;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(loadCustomer, {\n            query: query\n          });\n\n        case 4:\n          _yield$call3 = _context3.sent;\n          data = _yield$call3.data;\n          _context3.next = 8;\n          return put({\n            type: Actions.LOAD_CUSTOMER_SUCCESS,\n            payload: data,\n            pager: pager\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 14;\n          return put({\n            type: Actions.LOAD_CUSTOMER_ERROR,\n            error: _context3.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10]]);\n}\n/**\n *  DELETE CUSTOMER\n */\n\n\nfunction deleteCustomerSaga(_ref4) {\n  var id, _yield$call4, data;\n\n  return _regeneratorRuntime.wrap(function deleteCustomerSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          id = _ref4.id;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(deleteCustomer, {\n            id: id\n          });\n\n        case 4:\n          _yield$call4 = _context4.sent;\n          data = _yield$call4.data;\n          _context4.next = 8;\n          return put({\n            type: Actions.DELETE_CUSTOMER_SUCCESS,\n            payload: data\n          });\n\n        case 8:\n          _context4.next = 14;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 14;\n          return put({\n            type: Actions.DELETE_CUSTOMER_ERROR,\n            error: \"Can't delete this record!\"\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 10]]);\n}\n\nexport default function customerSaga() {\n  return _regeneratorRuntime.wrap(function customerSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(Actions.CREATE_CUSTOMER, createCustomerSaga);\n\n        case 2:\n          _context5.next = 4;\n          return takeEvery(Actions.LOAD_CUSTOMER, loadCustomerSaga);\n\n        case 4:\n          _context5.next = 6;\n          return takeEvery(Actions.DELETE_CUSTOMER, deleteCustomerSaga);\n\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/irfan/projects/local/trunk-user-interface-stand-alone/src/modules/customer/saga.js"],"names":["createCustomerSaga","loadCustomerSaga","loadCustomerbyIDSaga","deleteCustomerSaga","customerSaga","Actions","createCustomer","loadCustomer","loadCustomerByID","deleteCustomer","require","put","call","takeEvery","formData","data","type","CREATE_CUSTOMER_SUCCESS","payload","CREATE_CUSTOMER_ERROR","error","query","pager","LOAD_CUSTOMER_SUCCESS","LOAD_CUSTOMER_ERROR","id","DELETE_CUSTOMER_SUCCESS","DELETE_CUSTOMER_ERROR","CREATE_CUSTOMER","LOAD_CUSTOMER","DELETE_CUSTOMER"],"mappings":";;oDAWUA,kB;qDAoBAC,gB;qDAmBCC,oB;qDAoBAC,kB;qDAecC,Y;;AArFzB,OAAO,KAAKC,OAAZ,MAAyB,aAAzB;AACA,SACIC,cADJ,EAEIC,YAFJ,EAGIC,gBAHJ,EAIIC,cAJJ,QAKQ,WALR;;AAMA,eAAiCC,OAAO,CAAC,0BAAD,CAAxC;AAAA,IAAQC,GAAR,YAAQA,GAAR;AAAA,IAAaC,IAAb,YAAaA,IAAb;AAAA,IAAmBC,SAAnB,YAAmBA,SAAnB;AACA;AACA;AACA;;;AACA,SAAUb,kBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA+Bc,UAAAA,QAA/B,QAA+BA,QAA/B;AAAA;AAAA;AAEuB,iBAAMF,IAAI,CAACN,cAAD,EAAiBQ,QAAjB,CAAV;;AAFvB;AAAA;AAEeC,UAAAA,IAFf,eAEeA,IAFf;AAAA;AAGQ,iBAAMJ,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEX,OAAO,CAACY,uBADR;AAENC,YAAAA,OAAO,EAAEH;AAFH,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMJ,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEX,OAAO,CAACc,qBADR;AAENC,YAAAA,KAAK;AAFC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;;;AACA,SAAUnB,gBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA6BoB,UAAAA,KAA7B,SAA6BA,KAA7B;AAAA;AAAA;AAEgC,iBAAMT,IAAI,CAACL,YAAD,EAAe;AAAEc,YAAAA,KAAK,EAALA;AAAF,WAAf,CAAV;;AAFhC;AAAA;AAEgBN,UAAAA,IAFhB,gBAEgBA,IAFhB;AAEsBO,UAAAA,MAFtB,gBAEsBA,KAFtB;AAAA;AAGQ,iBAAMX,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEX,OAAO,CAACkB,qBADR;AAENL,YAAAA,OAAO,EAAEH,IAFH;AAGNO,YAAAA,KAAK,EAAEA;AAHD,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMX,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEX,OAAO,CAACmB,mBADR;AAENJ,YAAAA,KAAK;AAFC,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;;;AACC,SAAUlB,oBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiCuB,UAAAA,EAAjC,SAAiCA,EAAjC;AAAA;AAAA;AAEwB,iBAAMb,IAAI,CAACL,YAAD,EAAe;AAAEc,YAAAA,KAAK,EAALA;AAAF,WAAf,CAAV;;AAFxB;AAAA;AAEeN,UAAAA,IAFf,gBAEeA,IAFf;AAAA;AAGO,iBAAMJ,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEX,OAAO,CAACkB,qBADR;AAENL,YAAAA,OAAO,EAAEH,IAFH;AAGNO,YAAAA,KAAK,EAAEA;AAHD,WAAD,CAAT;;AAHP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASO,iBAAMX,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEX,OAAO,CAACmB,mBADR;AAENJ,YAAAA,KAAK;AAFC,WAAD,CAAT;;AATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBD;AACA;AACA;;;AAEC,SAAUjB,kBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA8BsB,UAAAA,EAA9B,SAA8BA,EAA9B;AAAA;AAAA;AAEwB,iBAAMb,IAAI,CAACH,cAAD,EAAiB;AAACgB,YAAAA,EAAE,EAAFA;AAAD,WAAjB,CAAV;;AAFxB;AAAA;AAEeV,UAAAA,IAFf,gBAEeA,IAFf;AAAA;AAGO,iBAAMJ,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEX,OAAO,CAACqB,uBADR;AAENR,YAAAA,OAAO,EAAEH;AAFH,WAAD,CAAT;;AAHP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQO,iBAAMJ,GAAG,CAAC;AACNK,YAAAA,IAAI,EAAEX,OAAO,CAACsB,qBADR;AAENP,YAAAA,KAAK,EAAE;AAFD,WAAD,CAAT;;AARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeD,eAAe,SAAUhB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMS,SAAS,CAACR,OAAO,CAACuB,eAAT,EAA0B5B,kBAA1B,CAAf;;AADW;AAAA;AAEX,iBAAMa,SAAS,CAACR,OAAO,CAACwB,aAAT,EAAwB5B,gBAAxB,CAAf;;AAFW;AAAA;AAGX,iBAAMY,SAAS,CAACR,OAAO,CAACyB,eAAT,EAA0B3B,kBAA1B,CAAf;;AAHW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as Actions from './constants';\nimport { \n    createCustomer, \n    loadCustomer,\n    loadCustomerByID,\n    deleteCustomer\n } from './service';\nconst { put, call, takeEvery } = require(\"@redux-saga/core/effects\");\n/**\n * Create Customer saga\n */\nfunction* createCustomerSaga({ formData }) {\n    try {\n        const {data} = yield call(createCustomer, formData);\n        yield put({\n            type: Actions.CREATE_CUSTOMER_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        yield put({\n            type: Actions.CREATE_CUSTOMER_ERROR,\n            error: error,\n        });\n    }\n}\n\n\n/**\n * Load customer\n */\nfunction* loadCustomerSaga({ query }) {\n    try {\n        const { data, pager } = yield call(loadCustomer, { query });\n        yield put({\n            type: Actions.LOAD_CUSTOMER_SUCCESS,\n            payload: data,\n            pager: pager\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.LOAD_CUSTOMER_ERROR,\n            error: error,\n        });\n    }\n}\n\n/**\n * Load customer by id\n */\n function* loadCustomerbyIDSaga({ id }) {\n    try {\n        const { data } = yield call(loadCustomer, { query });\n        yield put({\n            type: Actions.LOAD_CUSTOMER_SUCCESS,\n            payload: data,\n            pager: pager\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.LOAD_CUSTOMER_ERROR,\n            error: error,\n        });\n    }\n}\n\n/**\n *  DELETE CUSTOMER\n */\n\n function* deleteCustomerSaga({id}) {\n    try {\n        const { data } = yield call(deleteCustomer, {id});\n        yield put({\n            type: Actions.DELETE_CUSTOMER_SUCCESS,\n            payload: data,\n        });\n    } catch (error) {\n        yield put({\n            type: Actions.DELETE_CUSTOMER_ERROR,\n            error: \"Can't delete this record!\",\n        });\n    }\n}\n\nexport default function* customerSaga() {\n    yield takeEvery(Actions.CREATE_CUSTOMER, createCustomerSaga);\n    yield takeEvery(Actions.LOAD_CUSTOMER, loadCustomerSaga);\n    yield takeEvery(Actions.DELETE_CUSTOMER, deleteCustomerSaga);\n}\n"]},"metadata":{},"sourceType":"module"}