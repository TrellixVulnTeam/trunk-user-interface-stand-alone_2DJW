{"ast":null,"code":"import _regeneratorRuntime from \"/Users/irfan/projects/local/trunk-user-interface-stand-alone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/irfan/projects/local/trunk-user-interface-stand-alone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/irfan/projects/local/trunk-user-interface-stand-alone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/irfan/projects/local/trunk-user-interface-stand-alone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/irfan/projects/local/trunk-user-interface-stand-alone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/irfan/projects/local/trunk-user-interface-stand-alone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/irfan/projects/local/trunk-user-interface-stand-alone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/irfan/projects/local/trunk-user-interface-stand-alone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/irfan/projects/local/trunk-user-interface-stand-alone/src/public/customer/edit-customer.js\";\nimport React, { Component } from 'react';\nimport { CButton, CCard, CCardBody, CCol, CForm, CFormGroup, CInput, CLabel, CRow, CSelect, CInputFile } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loadCustomerbyID, updateCustomer } from '../../modules/customer/actions';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\nimport configApi from '../../config/api';\nimport validator from 'validator';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nwindow.jquery = window.$ = $;\n\nvar EditCustomer = /*#__PURE__*/function (_Component) {\n  _inherits(EditCustomer, _Component);\n\n  var _super = _createSuper(EditCustomer);\n\n  function EditCustomer() {\n    var _this;\n\n    _classCallCheck(this, EditCustomer);\n\n    _this = _super.call(this);\n\n    _this.onChange = function (e) {\n      _this.setState(_defineProperty({}, e.target.id, e.target.value));\n    };\n\n    _this.handleReset = function (resetForm) {\n      if (window.confirm('Reset?')) {\n        resetForm();\n      }\n    };\n\n    _this.onSubmit = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var customerData, pattern, formData, _i, _Object$keys, key;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                customerData = _this.state;\n                pattern = new RegExp(/^[0-9\\b]+$/); // Company Name\n\n                if (!(customerData.companyName === \"\")) {\n                  _context.next = 6;\n                  break;\n                }\n\n                NotificationManager.warning(\"Company name is required\");\n                return _context.abrupt(\"return\", false);\n\n              case 6:\n                if (!(customerData.contactPersonMobile === \"\")) {\n                  _context.next = 11;\n                  break;\n                }\n\n                NotificationManager.warning(\"Mobile number is required!\");\n                return _context.abrupt(\"return\", false);\n\n              case 11:\n                if (pattern.test(customerData.contactPersonMobile)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                NotificationManager.warning(\"Please enter only number.\");\n                return _context.abrupt(\"return\", false);\n\n              case 16:\n                if (!(customerData.contactPersonMobile.length !== 9)) {\n                  _context.next = 19;\n                  break;\n                }\n\n                NotificationManager.warning(\"Please enter valid phone number.\");\n                return _context.abrupt(\"return\", false);\n\n              case 19:\n                if (validator.isEmail(customerData.contactPersonEmail)) {\n                  _context.next = 22;\n                  break;\n                }\n\n                NotificationManager.warning(\"Enter valid email\");\n                return _context.abrupt(\"return\", false);\n\n              case 22:\n                formData = new FormData();\n                formData.append(\"companyName\", customerData.companyName);\n                formData.append(\"contactPersonFirstname\", customerData.contactPersonFirstname);\n                formData.append(\"contactPersonLastname\", customerData.contactPersonLastname);\n                formData.append(\"contactPersonMobile\", customerData.contactPersonMobile);\n                formData.append(\"contactPersonEmail\", customerData.contactPersonEmail);\n                formData.append(\"companyPhone\", customerData.companyPhone);\n                formData.append(\"emirates\", customerData.emirates);\n                formData.append(\"buildingNumber\", customerData.buildingNumber);\n                formData.append(\"street\", customerData.street);\n                formData.append(\"address\", customerData.address);\n                formData.append(\"profileImage\", customerData.profileImagefile);\n\n                for (_i = 0, _Object$keys = Object.keys(customerData.tradeLicenseFile); _i < _Object$keys.length; _i++) {\n                  key = _Object$keys[_i];\n                  formData.append('tradeLicenseFiles', customerData.tradeLicenseFile[key]);\n                }\n\n                _this.props.updateCustomer(formData);\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.saveProfileImageFile = function (e) {\n      _this.setState({\n        profileImagefile: e.target.files[0],\n        profileImagefileName: e.target.files[0].name\n      });\n    };\n\n    _this.saveTradeLicenseFiles = function (e) {\n      _this.setState({\n        tradeLicenseFile: e.target.files\n      });\n    };\n\n    _this.closeProfilePreviewContainer = function () {\n      _this.setState({\n        profileImagefile: null\n      });\n    };\n\n    _this.removeTradeLicense = function (key) {\n      var tradeLicenseFile = _this.state.tradeLicenseFile;\n      var fileListArr = Array.from(tradeLicenseFile);\n      fileListArr.splice(key, 1);\n\n      _this.setState({\n        tradeLicenseFile: fileListArr\n      });\n    };\n\n    _this.state = {\n      companyName: '',\n      contactPersonFirstname: '',\n      contactPersonLastname: '',\n      contactPersonMobile: '',\n      contactPersonMobilePrefix: '+971',\n      contactPersonEmail: '',\n      companyPhone: '',\n      companyPhonePrefix: '+971',\n      emirates: '0',\n      buildingNumber: '',\n      street: '',\n      address: '',\n      profileImagefile: null,\n      tradeLicenseFile: [],\n      formOpen: true\n    };\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_this));\n    _this.removeTradeLicense = _this.removeTradeLicense.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(EditCustomer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // profile image button\n      $(\".profileUploader\").on(\"click\", function () {\n        $(\".profile-upload-button\").trigger('click');\n      }); // trade licesnse button\n\n      $(\".tradeLicenseUploader\").click(function () {\n        $(\"#trade-license-files\").trigger('click');\n      });\n      var ids = this.props.match.params.id;\n      var id = ids;\n      this.props.loadCustomerbyID({\n        id: id\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var customer = this.props.customer;\n      var prevcustomer = prevProps.customer;\n\n      if (customer != prevcustomer && customer === null) {\n        NotificationManager.error(\"Customer doesn't exist\");\n        this.setState({\n          formOpen: false\n        });\n      }\n\n      if (customer && customer != prevcustomer) {\n        this.setState({\n          companyName: customer.CompanyName,\n          contactPersonFirstname: customer.ContactpersonFirstname,\n          contactPersonLastname: customer.ContactpersonLastname,\n          contactPersonMobile: customer.ContactpersonMobile,\n          contactPersonMobilePrefix: '+971',\n          contactPersonEmail: customer.ContactpersonEmail,\n          companyPhone: customer.CompanyPhone,\n          companyPhonePrefix: '+971',\n          emirates: customer.Emirates,\n          buildingNumber: customer.BuildingNO,\n          street: customer.Street,\n          address: customer.Address,\n          profileImagefile: customer.ProfileImage,\n          tradeLicenseFile: customer.customerDocuments\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          profileImagefile = _this$state.profileImagefile,\n          tradeLicenseFile = _this$state.tradeLicenseFile,\n          formOpen = _this$state.formOpen;\n      return /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(NotificationContainer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(CCol, {\n          xs: \"12\",\n          md: \"8\",\n          className: \"offset-2\",\n          children: /*#__PURE__*/_jsxDEV(CCard, {\n            children: /*#__PURE__*/_jsxDEV(CCardBody, {\n              children: formOpen\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return EditCustomer;\n}(Component);\n\nEditCustomer.propTypes = {\n  customerErrors: PropTypes.object.isRequired,\n  customer: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    customerErrors: state.customerErrors,\n    customer: state.customer.editCustomer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  loadCustomerbyID: loadCustomerbyID,\n  updateCustomer: updateCustomer\n})(EditCustomer);","map":{"version":3,"sources":["/Users/irfan/projects/local/trunk-user-interface-stand-alone/src/public/customer/edit-customer.js"],"names":["React","Component","CButton","CCard","CCardBody","CCol","CForm","CFormGroup","CInput","CLabel","CRow","CSelect","CInputFile","CIcon","PropTypes","connect","loadCustomerbyID","updateCustomer","NotificationContainer","NotificationManager","configApi","validator","$","window","jquery","EditCustomer","onChange","e","setState","target","id","value","handleReset","resetForm","confirm","onSubmit","preventDefault","customerData","state","pattern","RegExp","companyName","warning","contactPersonMobile","test","length","isEmail","contactPersonEmail","formData","FormData","append","contactPersonFirstname","contactPersonLastname","companyPhone","emirates","buildingNumber","street","address","profileImagefile","Object","keys","tradeLicenseFile","key","props","saveProfileImageFile","files","profileImagefileName","name","saveTradeLicenseFiles","closeProfilePreviewContainer","removeTradeLicense","fileListArr","Array","from","splice","contactPersonMobilePrefix","companyPhonePrefix","formOpen","bind","on","trigger","click","ids","match","params","prevProps","customer","prevcustomer","error","CompanyName","ContactpersonFirstname","ContactpersonLastname","ContactpersonMobile","ContactpersonEmail","CompanyPhone","Emirates","BuildingNO","Street","Address","ProfileImage","customerDocuments","propTypes","customerErrors","object","isRequired","mapStateToProps","editCustomer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CForm,\n  CFormGroup,\n  CInput,\n  CLabel,\n  CRow,\n  CSelect,\n  CInputFile,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loadCustomerbyID, updateCustomer } from '../../modules/customer/actions';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\nimport configApi from '../../config/api';\n\nimport validator from 'validator';\n\nimport $ from 'jquery';\nwindow.jquery = window.$ = $\n\nclass EditCustomer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      companyName: '',\n      contactPersonFirstname: '',\n      contactPersonLastname: '',\n      contactPersonMobile: '',\n      contactPersonMobilePrefix: '+971',\n      contactPersonEmail: '',\n      companyPhone: '',\n      companyPhonePrefix: '+971',\n      emirates: '0',\n      buildingNumber: '',\n      street: '',\n      address: '',\n      profileImagefile: null,\n      tradeLicenseFile: [],\n      formOpen: true\n    }\n    this.onSubmit = this.onSubmit.bind(this);\n    this.removeTradeLicense = this.removeTradeLicense.bind(this);\n  }\n\n  componentDidMount() {\n\n    // profile image button\n    $(\".profileUploader\").on(\"click\", function() {\n      $(\".profile-upload-button\").trigger('click');\n    });\n\n    // trade licesnse button\n    $(\".tradeLicenseUploader\").click(function(){\n      $(\"#trade-license-files\").trigger('click');\n    });\n\n    const ids = this.props.match.params.id;\n    const id = ids;\n    this.props.loadCustomerbyID({id});\n  }\n\n  componentDidUpdate(prevProps) {\n      const { customer } = this.props;\n      const { customer: prevcustomer } = prevProps;\n      if(customer != prevcustomer && customer === null) {\n        NotificationManager.error(\"Customer doesn't exist\");\n        this.setState({formOpen: false})\n      }\n      if(customer && customer != prevcustomer) {\n        this.setState({\n            companyName: customer.CompanyName,\n            contactPersonFirstname: customer.ContactpersonFirstname,\n            contactPersonLastname: customer.ContactpersonLastname,\n            contactPersonMobile: customer.ContactpersonMobile,\n            contactPersonMobilePrefix: '+971',\n            contactPersonEmail: customer.ContactpersonEmail,\n            companyPhone: customer.CompanyPhone,\n            companyPhonePrefix: '+971',\n            emirates: customer.Emirates,\n            buildingNumber: customer.BuildingNO,\n            street: customer.Street,\n            address: customer.Address,\n            profileImagefile: customer.ProfileImage,\n            tradeLicenseFile: customer.customerDocuments\n        })\n      }\n  }\n\n  onChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n  \n  // reset\n  handleReset = (resetForm) => {\n    if (window.confirm('Reset?')) {\n      resetForm();\n    }\n  };\n\n  onSubmit = async (e)  => {\n    e.preventDefault();\n    const customerData = this.state;\n    var pattern = new RegExp(/^[0-9\\b]+$/);\n\n    // Company Name\n    if(customerData.companyName === \"\") {\n      NotificationManager.warning(\"Company name is required\");\n      return false;\n    }\n\n    // Mobile Number\n    if (customerData.contactPersonMobile === \"\") {\n      NotificationManager.warning(\"Mobile number is required!\");\n      return false;\n    }else if(!pattern.test(customerData.contactPersonMobile)) {\n      NotificationManager.warning(\"Please enter only number.\");\n      return false;\n    }else if(customerData.contactPersonMobile.length !== 9) {\n      NotificationManager.warning(\"Please enter valid phone number.\");\n      return false;\n    }\n\n    // Contact Email\n    if(!validator.isEmail(customerData.contactPersonEmail)) {\n      NotificationManager.warning(\"Enter valid email\");\n      return false;\n    }\n\n    const formData = new FormData();\n    formData.append(\"companyName\", customerData.companyName);\n    formData.append(\"contactPersonFirstname\", customerData.contactPersonFirstname);\n    formData.append(\"contactPersonLastname\", customerData.contactPersonLastname);\n    formData.append(\"contactPersonMobile\", customerData.contactPersonMobile);\n    formData.append(\"contactPersonEmail\", customerData.contactPersonEmail);\n    formData.append(\"companyPhone\", customerData.companyPhone);\n    formData.append(\"emirates\", customerData.emirates);\n    formData.append(\"buildingNumber\", customerData.buildingNumber);\n    formData.append(\"street\", customerData.street);\n    formData.append(\"address\", customerData.address);\n    formData.append(\"profileImage\", customerData.profileImagefile);\n    for (const key of Object.keys(customerData.tradeLicenseFile)) {\n        formData.append('tradeLicenseFiles', customerData.tradeLicenseFile[key])\n    }\n    this.props.updateCustomer( formData );\n  }\n\n  // Save Profile Images\n  saveProfileImageFile = (e) => {\n    this.setState({\n      profileImagefile: e.target.files[0],\n      profileImagefileName: e.target.files[0].name,\n    });\n  }\n\n  // Save Trade License\n  saveTradeLicenseFiles = (e) => {\n    this.setState({ \n      tradeLicenseFile: e.target.files,\n    })\n  }\n\n  closeProfilePreviewContainer = () => {\n    this.setState({\n      profileImagefile: null\n    })\n  }\n\n  removeTradeLicense = (key) => {\n    const { tradeLicenseFile } = this.state;\n    const fileListArr = Array.from(tradeLicenseFile);\n    fileListArr.splice(key, 1);\n    this.setState({\n      tradeLicenseFile: fileListArr\n    })\n  }\n\n  render() {\n    const { profileImagefile, tradeLicenseFile, formOpen } = this.state;\n    return (\n      <CRow>\n        <NotificationContainer/>\n        <CCol xs=\"12\" md=\"8\" className=\"offset-2\">\n          <CCard>\n            <CCardBody>\n              {\n                formOpen\n              }\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    )\n  }\n}\n\nEditCustomer.propTypes = {\n  customerErrors: PropTypes.object.isRequired,\n  customer: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  customerErrors: state.customerErrors,\n  customer: state.customer.editCustomer\n});\nexport default connect(\n  mapStateToProps,\n  { loadCustomerbyID, updateCustomer }\n)(EditCustomer);\n"]},"metadata":{},"sourceType":"module"}